{
  "info": {
    "_postman_id": "8dcdef24-33e7-441c-85a6-e5740a2bdf6d",
    "name": "Forum API V1 Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12297972"
  },
  "item": [
    {
      "name": "Comments",
      "item": [
        {
          "name": "[No Test] Prerequiresite",
          "item": [
            {
              "name": "[No Test] Add User Dicoding",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\",\r\n    \"fullname\": \"{{newFullname}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{host}}:{{port}}/users",
                  "protocol": "{{protocol}}",
                  "host": ["{{host}}"],
                  "port": "{{port}}",
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "[No Test] Add User Johndoe",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{newUsername2}}\",\r\n    \"password\": \"{{newPassword2}}\",\r\n    \"fullname\": \"{{newFullname2}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{host}}:{{port}}/users",
                  "protocol": "{{protocol}}",
                  "host": ["{{host}}"],
                  "port": "{{port}}",
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "[No Test] Login User Dicoding",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const host = pm.environment.get('host');\r",
                      "const port = pm.environment.get('port');\r",
                      "const protocol = pm.environment.get('protocol');\r",
                      "\r",
                      "const postRequest = {\r",
                      "    url: `${protocol}://${host}:${port}/users`,\r",
                      "    method: 'POST',\r",
                      "    header: {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    },\r",
                      "    body: {\r",
                      "        mode: 'raw',\r",
                      "        raw: JSON.stringify({\r",
                      "            username: pm.environment.get('newUsername'),\r",
                      "            password: pm.environment.get('newPassword'),\r",
                      "            fullname: pm.environment.get('newFullname')\r",
                      "        }),\r",
                      "    },\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(postRequest, (error, response) => {\r",
                      "    console.log(error ? error : response.json());\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseJson = pm.response.json();\r",
                      "\r",
                      "pm.environment.set('accessToken', responseJson.data.accessToken);\r",
                      "pm.environment.set('refreshToken', responseJson.data.refreshToken);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{newUsername}}\",\r\n    \"password\": \"{{newPassword}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{host}}:{{port}}/authentications",
                  "protocol": "{{protocol}}",
                  "host": ["{{host}}"],
                  "port": "{{port}}",
                  "path": ["authentications"]
                }
              },
              "response": []
            },
            {
              "name": "[No Test] Login User Johndoe",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const host = pm.environment.get('host');\r",
                      "const port = pm.environment.get('port');\r",
                      "const protocol = pm.environment.get('protocol');\r",
                      "\r",
                      "const postRequest = {\r",
                      "    url: `${protocol}://${host}:${port}/users`,\r",
                      "    method: 'POST',\r",
                      "    header: {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    },\r",
                      "    body: {\r",
                      "        mode: 'raw',\r",
                      "        raw: JSON.stringify({\r",
                      "            username: pm.environment.get('newUsername'),\r",
                      "            password: pm.environment.get('newPassword'),\r",
                      "            fullname: pm.environment.get('newFullname')\r",
                      "        }),\r",
                      "    },\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(postRequest, (error, response) => {\r",
                      "    console.log(error ? error : response.json());\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseJson = pm.response.json();\r",
                      "\r",
                      "pm.environment.set('accessToken2', responseJson.data.accessToken);\r",
                      "pm.environment.set('refreshToken2', responseJson.data.refreshToken);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{newUsername2}}\",\r\n    \"password\": \"{{newPassword2}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{host}}:{{port}}/authentications",
                  "protocol": "{{protocol}}",
                  "host": ["{{host}}"],
                  "port": "{{port}}",
                  "path": ["authentications"]
                }
              },
              "response": []
            },
            {
              "name": "[No Test] Add Thread with User Dicoding",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const responseJson = pm.response.json();\r",
                      "\r",
                      "pm.environment.set('threadId', responseJson.data.addedThread.id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"title\": \"{{newThreadTitle}}\",\r\n    \"body\": \"{{newThreadBody}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{host}}:{{port}}/threads",
                  "protocol": "{{protocol}}",
                  "host": ["{{host}}"],
                  "port": "{{port}}",
                  "path": ["threads"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Add Comment with No Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('should response 401 status code', () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('should show Missing Authentication message', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "    pm.expect(responseJson.message).to.equal('Missing authentication');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
              "protocol": "{{protocol}}",
              "host": ["{{host}}"],
              "port": "{{port}}",
              "path": ["threads", "{{threadId}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment with Not Found Thread",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('response should have 404 status code', () => {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test('response should have correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "    pm.expect(responseJson.status).to.equal('fail');\r",
                  "    pm.expect(responseJson.message).to.not.equal('');\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{protocol}}://{{host}}:{{port}}/threads/xxx/comments",
              "protocol": "{{protocol}}",
              "host": ["{{host}}"],
              "port": "{{port}}",
              "path": ["threads", "xxx", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment with Invalid Payload",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('response should have 400 status code', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('response should have correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "    pm.expect(responseJson.status).to.equal('fail');\r",
                  "    pm.expect(responseJson.message).to.not.equal('');\r",
                  "});\r",
                  "\r",
                  "const repeatRequestUntilDatasetEmpty = () => {\r",
                  "    const badAddCommentPayloads = pm.environment.get('badAddCommentPayloads');\r",
                  " \r",
                  "    if(badAddCommentPayloads && badAddCommentPayloads.length > 0) {\r",
                  "        postman.setNextRequest('Add Comment with Invalid Payload');\r",
                  "    }\r",
                  "}\r",
                  " \r",
                  "repeatRequestUntilDatasetEmpty();\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "let badAddCommentPayloads = pm.environment.get('badAddCommentPayloads');\r",
                  "\r",
                  "if (!badAddCommentPayloads || badAddCommentPayloads.length === 0) {\r",
                  "    badAddCommentPayloads = [\r",
                  "        {},\r",
                  "        { content: 123 },\r",
                  "    ];\r",
                  "}\r",
                  "\r",
                  "const currentBadAddCommentPayload = badAddCommentPayloads.shift();\r",
                  "pm.environment.set('currentBadAddCommentPayload', JSON.stringify(currentBadAddCommentPayload));\r",
                  "pm.environment.set('badAddCommentPayloads', badAddCommentPayloads);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{{currentBadAddCommentPayload}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
              "protocol": "{{protocol}}",
              "host": ["{{host}}"],
              "port": "{{port}}",
              "path": ["threads", "{{threadId}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment with User Johndoe",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('response should have 201 status code', () => {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test('response should have correct property and value', () => {\r",
                  "    const content = pm.environment.get('newCommentContent');\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "    pm.expect(responseJson.status).to.equal('success');\r",
                  "    pm.expect(responseJson.data).to.be.an('object');\r",
                  "    pm.expect(responseJson.data.addedComment).to.be.an('object');\r",
                  "    pm.expect(responseJson.data.addedComment.id).to.be.a('string');\r",
                  "    pm.expect(responseJson.data.addedComment.id).to.not.equal('');\r",
                  "    pm.expect(responseJson.data.addedComment.content).to.equal(content);\r",
                  "    pm.expect(responseJson.data.addedComment.owner).to.be.a('string');\r",
                  "    pm.expect(responseJson.data.addedComment.owner).to.not.equal('');\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken2}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
              "protocol": "{{protocol}}",
              "host": ["{{host}}"],
              "port": "{{port}}",
              "path": ["threads", "{{threadId}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Add Comment with User Dicoding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('response should have 201 status code', () => {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.test('response should have correct property and value', () => {\r",
                  "    const content = pm.environment.get('newCommentContent');\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "    pm.expect(responseJson.status).to.equal('success');\r",
                  "    pm.expect(responseJson.data).to.be.an('object');\r",
                  "    pm.expect(responseJson.data.addedComment).to.be.an('object');\r",
                  "    pm.expect(responseJson.data.addedComment.id).to.be.a('string');\r",
                  "    pm.expect(responseJson.data.addedComment.id).to.not.equal('');\r",
                  "    pm.expect(responseJson.data.addedComment.content).to.equal(content);\r",
                  "    pm.expect(responseJson.data.addedComment.owner).to.be.a('string');\r",
                  "    pm.expect(responseJson.data.addedComment.owner).to.not.equal('');\r",
                  "\r",
                  "    pm.environment.set('commentId', responseJson.data.addedComment.id);\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"content\": \"{{newCommentContent}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}/comments",
              "protocol": "{{protocol}}",
              "host": ["{{host}}"],
              "port": "{{port}}",
              "path": ["threads", "{{threadId}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Get Commented Thread",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('should response with status code 200', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('should contain correct property and value', () => {\r",
                  "    const responseJson = pm.response.json();\r",
                  "\r",
                  "    pm.expect(responseJson).to.be.an('object');\r",
                  "    pm.expect(responseJson.status).to.equal('success');\r",
                  "    pm.expect(responseJson.data).to.be.an('object');\r",
                  "    pm.expect(responseJson.data.thread).to.be.an('object');\r",
                  "    pm.expect(responseJson.data.thread.id).to.be.a('string');\r",
                  "    pm.expect(responseJson.data.thread.id).to.not.equal('');\r",
                  "    pm.expect(responseJson.data.thread.title).to.equal(pm.environment.get('newThreadTitle'));\r",
                  "    pm.expect(responseJson.data.thread.body).to.equal(pm.environment.get('newThreadBody'));\r",
                  "    pm.expect(responseJson.data.thread.date).to.be.a('string');\r",
                  "    pm.expect(responseJson.data.thread.data).to.not.equal('');\r",
                  "    pm.expect(responseJson.data.thread.username).to.equal(pm.environment.get('newUsername'));\r",
                  "    pm.expect(responseJson.data.thread.comments).to.be.an('array');\r",
                  "    pm.expect(responseJson.data.thread.comments).to.have.length(2);\r",
                  "    \r",
                  "    const [comment1, comment2] = responseJson.data.thread.comments;\r",
                  "\r",
                  "    pm.expect(comment1).to.be.an('object');\r",
                  "    pm.expect(comment1.id).to.be.a('string');\r",
                  "    pm.expect(comment1.username).to.equal(pm.environment.get('newUsername2'));\r",
                  "    pm.expect(comment1.date).to.be.a('string');\r",
                  "    pm.expect(comment1.content).to.equal(pm.environment.get('newCommentContent'));\r",
                  "\r",
                  "    pm.expect(comment2).to.be.an('object');\r",
                  "    pm.expect(comment2.id).to.be.a('string');\r",
                  "    pm.expect(comment2.username).to.equal(pm.environment.get('newUsername'));\r",
                  "    pm.expect(comment2.date).to.be.a('string');\r",
                  "    pm.expect(comment2.content).to.equal(pm.environment.get('newCommentContent'));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{protocol}}://{{host}}:{{port}}/threads/{{threadId}}",
              "protocol": "{{protocol}}",
              "host": ["{{host}}"],
              "port": "{{port}}",
              "path": ["threads", "{{threadId}}"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
